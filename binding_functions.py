from tkinter import *

# bind(self, sequence=None, func=None, add=None)
#     Bind to this widget at event SEQUENCE a call to function FUNC.
#
#     SEQUENCE is a string of concatenated event
#     patterns. An event pattern is of the form
#     <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
#     of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
#     Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
#     B3, Alt, Button4, B4, Double, Button5, B5 Triple,
#     Mod1, M1. TYPE is one of Activate, Enter, Map,
#     ButtonPress, Button, Expose, Motion, ButtonRelease
#     FocusIn, MouseWheel, Circulate, FocusOut, Property,
#     Colormap, Gravity Reparent, Configure, KeyPress, Key,
#     Unmap, Deactivate, KeyRelease Visibility, Destroy,
#     Leave and DETAIL is the button number for ButtonPress,
#     ButtonRelease and DETAIL is the Keysym for KeyPress and
#     KeyRelease. Examples are
#     <Control-Button-1> for pressing Control and mouse button 1 or
#     <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
#     An event pattern can also be a virtual event of the form
#     <<AString>> where AString can be arbitrary. This
#     event can be generated by event_generate.
#     If events are concatenated they must appear shortly
#     after each other.
#
#     FUNC will be called if the event sequence occurs with an
#     instance of Event as argument. If the return value of FUNC is
#     "break" no further bound function is invoked.
#
#     An additional boolean parameter ADD specifies whether FUNC will
#     be called additionally to the other bound function or whether
#     it will replace the previous function.
#
#     Bind will return an identifier to allow deletion of the bound function with
#     unbind without memory leak.
#
#     If FUNC or SEQUENCE is omitted the bound function or list
#     of bound events are returned.

main = Tk()
main.title('Binding Functions')
main.geometry('800x600')


def keys_pressed(event):
    print(f'You pressed the key: {event}')


def left_click(event):
    print(f'Left click: {event}')


def right_click(event):
    print(f'Right click: {event}')


main.bind("<Key>", keys_pressed)

click_button = Button(main, text="Click me")
click_button.bind('<Button-1>', left_click)
click_button.bind('<Button-3>', right_click)
click_button.pack(pady=100, padx=100)

if __name__ == '__main__':
    main.mainloop()
